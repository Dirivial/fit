// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["referentialIntegrity"]
}

datasource db {
    provider             = "mysql"
    url                  = env("DATABASE_URL")
    referentialIntegrity = "prisma"
}

model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id                String             @id @default(cuid())
    name              String?
    email             String?            @unique
    emailVerified     DateTime?
    image             String?
    accounts          Account[]
    sessions          Session[]
    Workout           Workout[]
    ExerciseTemplates ExerciseTemplate[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

// For creating a workout
model Workout {
    id            Int               @id @default(autoincrement())
    name          String            @db.VarChar(64)
    lastPerformed DateTime          @default(now())
    user          User              @relation(fields: [userId], references: [id])
    userId        String
    Exercises     WorkoutExercise[]
}

// The exercises a workout consists of
model WorkoutExercise {
    id                 Int              @id @default(autoincrement())
    position           Int              @default(0)
    Sets               Json?
    ExerciseTemplate   ExerciseTemplate @relation(fields: [exerciseTemplateId], references: [id])
    exerciseTemplateId Int
    Workout            Workout?         @relation(fields: [workoutId], references: [id])
    workoutId          Int?
}

// An exercise, this is what is logged
model Exercise {
    id                 Int               @id @default(autoincrement())
    ExerciseSets       ExerciseSet[]
    date               DateTime?         @default(now())
    ExerciseTemplate   ExerciseTemplate? @relation(fields: [exerciseTemplateId], references: [id])
    exerciseTemplateId Int?
}

// Sets of some exercise/workoutexercise
model ExerciseSet {
    id         Int       @id @default(autoincrement())
    reps       Int       @default(5)
    weight     Float     @default(0)
    Exercise   Exercise? @relation(fields: [exerciseId], references: [id])
    exerciseId Int?
}

// This is mostly to make searching for a specific way easier (when analyzing)
model ExerciseTemplate {
    id              Int               @id @default(autoincrement())
    User            User              @relation(fields: [userId], references: [id])
    userId          String
    Exercise        Exercise[]
    name            String            @db.VarChar(64)
    WorkoutExercise WorkoutExercise[]
}
